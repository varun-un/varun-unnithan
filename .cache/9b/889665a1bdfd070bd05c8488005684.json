{"id":"node_modules/@babylonjs/core/Shaders/ShadersInclude/imageProcessingFunctions.js","dependencies":[{"name":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\imageProcessingFunctions.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\package.json","includedInParent":true,"mtime":1618615549721},{"name":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\.babelrc","includedInParent":true,"mtime":1618361427593},{"name":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\package.json","includedInParent":true,"mtime":499162500000},{"name":"../../Materials/effect","loc":{"line":1,"column":23},"parent":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\imageProcessingFunctions.js","resolved":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\Materials\\effect.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.imageProcessingFunctions = void 0;\n\nvar _effect = require(\"../../Materials/effect\");\n\nvar name = 'imageProcessingFunctions';\nvar shader = \"#if defined(COLORGRADING) && !defined(COLORGRADING3D)\\n\\n#define inline\\nvec3 sampleTexture3D(sampler2D colorTransform,vec3 color,vec2 sampler3dSetting)\\n{\\nfloat sliceSize=2.0*sampler3dSetting.x;\\n#ifdef SAMPLER3DGREENDEPTH\\nfloat sliceContinuous=(color.g-sampler3dSetting.x)*sampler3dSetting.y;\\n#else\\nfloat sliceContinuous=(color.b-sampler3dSetting.x)*sampler3dSetting.y;\\n#endif\\nfloat sliceInteger=floor(sliceContinuous);\\n\\n\\nfloat sliceFraction=sliceContinuous-sliceInteger;\\n#ifdef SAMPLER3DGREENDEPTH\\nvec2 sliceUV=color.rb;\\n#else\\nvec2 sliceUV=color.rg;\\n#endif\\nsliceUV.x*=sliceSize;\\nsliceUV.x+=sliceInteger*sliceSize;\\nsliceUV=saturate(sliceUV);\\nvec4 slice0Color=texture2D(colorTransform,sliceUV);\\nsliceUV.x+=sliceSize;\\nsliceUV=saturate(sliceUV);\\nvec4 slice1Color=texture2D(colorTransform,sliceUV);\\nvec3 result=mix(slice0Color.rgb,slice1Color.rgb,sliceFraction);\\n#ifdef SAMPLER3DBGRMAP\\ncolor.rgb=result.rgb;\\n#else\\ncolor.rgb=result.bgr;\\n#endif\\nreturn color;\\n}\\n#endif\\n#ifdef TONEMAPPING_ACES\\n\\n\\n\\n\\n\\nconst mat3 ACESInputMat=mat3(\\nvec3(0.59719,0.07600,0.02840),\\nvec3(0.35458,0.90834,0.13383),\\nvec3(0.04823,0.01566,0.83777)\\n);\\n\\nconst mat3 ACESOutputMat=mat3(\\nvec3( 1.60475,-0.10208,-0.00327),\\nvec3(-0.53108,1.10813,-0.07276),\\nvec3(-0.07367,-0.00605,1.07602)\\n);\\nvec3 RRTAndODTFit(vec3 v)\\n{\\nvec3 a=v*(v+0.0245786)-0.000090537;\\nvec3 b=v*(0.983729*v+0.4329510)+0.238081;\\nreturn a/b;\\n}\\nvec3 ACESFitted(vec3 color)\\n{\\ncolor=ACESInputMat*color;\\n\\ncolor=RRTAndODTFit(color);\\ncolor=ACESOutputMat*color;\\n\\ncolor=saturate(color);\\nreturn color;\\n}\\n#endif\\nvec4 applyImageProcessing(vec4 result) {\\n#ifdef EXPOSURE\\nresult.rgb*=exposureLinear;\\n#endif\\n#ifdef VIGNETTE\\n\\nvec2 viewportXY=gl_FragCoord.xy*vInverseScreenSize;\\nviewportXY=viewportXY*2.0-1.0;\\nvec3 vignetteXY1=vec3(viewportXY*vignetteSettings1.xy+vignetteSettings1.zw,1.0);\\nfloat vignetteTerm=dot(vignetteXY1,vignetteXY1);\\nfloat vignette=pow(vignetteTerm,vignetteSettings2.w);\\n\\nvec3 vignetteColor=vignetteSettings2.rgb;\\n#ifdef VIGNETTEBLENDMODEMULTIPLY\\nvec3 vignetteColorMultiplier=mix(vignetteColor,vec3(1,1,1),vignette);\\nresult.rgb*=vignetteColorMultiplier;\\n#endif\\n#ifdef VIGNETTEBLENDMODEOPAQUE\\nresult.rgb=mix(vignetteColor,result.rgb,vignette);\\n#endif\\n#endif\\n#ifdef TONEMAPPING\\n#ifdef TONEMAPPING_ACES\\nresult.rgb=ACESFitted(result.rgb);\\n#else\\nconst float tonemappingCalibration=1.590579;\\nresult.rgb=1.0-exp2(-tonemappingCalibration*result.rgb);\\n#endif\\n#endif\\n\\nresult.rgb=toGammaSpace(result.rgb);\\nresult.rgb=saturate(result.rgb);\\n#ifdef CONTRAST\\n\\nvec3 resultHighContrast=result.rgb*result.rgb*(3.0-2.0*result.rgb);\\nif (contrast<1.0) {\\n\\nresult.rgb=mix(vec3(0.5,0.5,0.5),result.rgb,contrast);\\n} else {\\n\\nresult.rgb=mix(result.rgb,resultHighContrast,contrast-1.0);\\n}\\n#endif\\n\\n#ifdef COLORGRADING\\nvec3 colorTransformInput=result.rgb*colorTransformSettings.xxx+colorTransformSettings.yyy;\\n#ifdef COLORGRADING3D\\nvec3 colorTransformOutput=texture(txColorTransform,colorTransformInput).rgb;\\n#else\\nvec3 colorTransformOutput=sampleTexture3D(txColorTransform,colorTransformInput,colorTransformSettings.yz).rgb;\\n#endif\\nresult.rgb=mix(result.rgb,colorTransformOutput,colorTransformSettings.www);\\n#endif\\n#ifdef COLORCURVES\\n\\nfloat luma=getLuminance(result.rgb);\\nvec2 curveMix=clamp(vec2(luma*3.0-1.5,luma*-3.0+1.5),vec2(0.0),vec2(1.0));\\nvec4 colorCurve=vCameraColorCurveNeutral+curveMix.x*vCameraColorCurvePositive-curveMix.y*vCameraColorCurveNegative;\\nresult.rgb*=colorCurve.rgb;\\nresult.rgb=mix(vec3(luma),result.rgb,colorCurve.a);\\n#endif\\nreturn result;\\n}\";\n_effect.Effect.IncludesShadersStore[name] = shader;\n/** @hidden */\n\nvar imageProcessingFunctions = {\n  name: name,\n  shader: shader\n};\nexports.imageProcessingFunctions = imageProcessingFunctions;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":3,"column":4},"generated":{"line":10,"column":4}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":3,"column":8},"generated":{"line":10,"column":8}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":3,"column":11},"generated":{"line":10,"column":11}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":37}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":4,"column":4},"generated":{"line":11,"column":4}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":4,"column":10},"generated":{"line":11,"column":10}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":4,"column":13},"generated":{"line":11,"column":13}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":11,"column":3614}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":138,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":138,"column":7},"generated":{"line":12,"column":15}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":138,"column":0},"generated":{"line":12,"column":35}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":138,"column":28},"generated":{"line":12,"column":36}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":138,"column":0},"generated":{"line":12,"column":40}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":138,"column":36},"generated":{"line":12,"column":44}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":138,"column":0},"generated":{"line":12,"column":50}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":139,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":140,"column":7},"generated":{"line":15,"column":0}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":140,"column":11},"generated":{"line":15,"column":4}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":140,"column":35},"generated":{"line":15,"column":28}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":140,"column":38},"generated":{"line":15,"column":31}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":140,"column":40},"generated":{"line":16,"column":0}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":140,"column":40},"generated":{"line":16,"column":2}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":140,"column":44},"generated":{"line":16,"column":6}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":140,"column":44},"generated":{"line":16,"column":8}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":140,"column":38},"generated":{"line":16,"column":12}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":140,"column":46},"generated":{"line":17,"column":0}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":140,"column":46},"generated":{"line":17,"column":2}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":140,"column":52},"generated":{"line":17,"column":8}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":140,"column":52},"generated":{"line":17,"column":10}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":140,"column":38},"generated":{"line":18,"column":0}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts","name":null,"original":{"line":140,"column":7},"generated":{"line":18,"column":1}}],"sources":{"../../../../sourceES6/core/Shaders/ShadersInclude/imageProcessingFunctions.ts":"import { Effect } from \"../../Materials/effect\";\n\nlet name = 'imageProcessingFunctions';\nlet shader = `#if defined(COLORGRADING) && !defined(COLORGRADING3D)\n\n#define inline\nvec3 sampleTexture3D(sampler2D colorTransform,vec3 color,vec2 sampler3dSetting)\n{\nfloat sliceSize=2.0*sampler3dSetting.x;\n#ifdef SAMPLER3DGREENDEPTH\nfloat sliceContinuous=(color.g-sampler3dSetting.x)*sampler3dSetting.y;\n#else\nfloat sliceContinuous=(color.b-sampler3dSetting.x)*sampler3dSetting.y;\n#endif\nfloat sliceInteger=floor(sliceContinuous);\n\n\nfloat sliceFraction=sliceContinuous-sliceInteger;\n#ifdef SAMPLER3DGREENDEPTH\nvec2 sliceUV=color.rb;\n#else\nvec2 sliceUV=color.rg;\n#endif\nsliceUV.x*=sliceSize;\nsliceUV.x+=sliceInteger*sliceSize;\nsliceUV=saturate(sliceUV);\nvec4 slice0Color=texture2D(colorTransform,sliceUV);\nsliceUV.x+=sliceSize;\nsliceUV=saturate(sliceUV);\nvec4 slice1Color=texture2D(colorTransform,sliceUV);\nvec3 result=mix(slice0Color.rgb,slice1Color.rgb,sliceFraction);\n#ifdef SAMPLER3DBGRMAP\ncolor.rgb=result.rgb;\n#else\ncolor.rgb=result.bgr;\n#endif\nreturn color;\n}\n#endif\n#ifdef TONEMAPPING_ACES\n\n\n\n\n\nconst mat3 ACESInputMat=mat3(\nvec3(0.59719,0.07600,0.02840),\nvec3(0.35458,0.90834,0.13383),\nvec3(0.04823,0.01566,0.83777)\n);\n\nconst mat3 ACESOutputMat=mat3(\nvec3( 1.60475,-0.10208,-0.00327),\nvec3(-0.53108,1.10813,-0.07276),\nvec3(-0.07367,-0.00605,1.07602)\n);\nvec3 RRTAndODTFit(vec3 v)\n{\nvec3 a=v*(v+0.0245786)-0.000090537;\nvec3 b=v*(0.983729*v+0.4329510)+0.238081;\nreturn a/b;\n}\nvec3 ACESFitted(vec3 color)\n{\ncolor=ACESInputMat*color;\n\ncolor=RRTAndODTFit(color);\ncolor=ACESOutputMat*color;\n\ncolor=saturate(color);\nreturn color;\n}\n#endif\nvec4 applyImageProcessing(vec4 result) {\n#ifdef EXPOSURE\nresult.rgb*=exposureLinear;\n#endif\n#ifdef VIGNETTE\n\nvec2 viewportXY=gl_FragCoord.xy*vInverseScreenSize;\nviewportXY=viewportXY*2.0-1.0;\nvec3 vignetteXY1=vec3(viewportXY*vignetteSettings1.xy+vignetteSettings1.zw,1.0);\nfloat vignetteTerm=dot(vignetteXY1,vignetteXY1);\nfloat vignette=pow(vignetteTerm,vignetteSettings2.w);\n\nvec3 vignetteColor=vignetteSettings2.rgb;\n#ifdef VIGNETTEBLENDMODEMULTIPLY\nvec3 vignetteColorMultiplier=mix(vignetteColor,vec3(1,1,1),vignette);\nresult.rgb*=vignetteColorMultiplier;\n#endif\n#ifdef VIGNETTEBLENDMODEOPAQUE\nresult.rgb=mix(vignetteColor,result.rgb,vignette);\n#endif\n#endif\n#ifdef TONEMAPPING\n#ifdef TONEMAPPING_ACES\nresult.rgb=ACESFitted(result.rgb);\n#else\nconst float tonemappingCalibration=1.590579;\nresult.rgb=1.0-exp2(-tonemappingCalibration*result.rgb);\n#endif\n#endif\n\nresult.rgb=toGammaSpace(result.rgb);\nresult.rgb=saturate(result.rgb);\n#ifdef CONTRAST\n\nvec3 resultHighContrast=result.rgb*result.rgb*(3.0-2.0*result.rgb);\nif (contrast<1.0) {\n\nresult.rgb=mix(vec3(0.5,0.5,0.5),result.rgb,contrast);\n} else {\n\nresult.rgb=mix(result.rgb,resultHighContrast,contrast-1.0);\n}\n#endif\n\n#ifdef COLORGRADING\nvec3 colorTransformInput=result.rgb*colorTransformSettings.xxx+colorTransformSettings.yyy;\n#ifdef COLORGRADING3D\nvec3 colorTransformOutput=texture(txColorTransform,colorTransformInput).rgb;\n#else\nvec3 colorTransformOutput=sampleTexture3D(txColorTransform,colorTransformInput,colorTransformSettings.yz).rgb;\n#endif\nresult.rgb=mix(result.rgb,colorTransformOutput,colorTransformSettings.www);\n#endif\n#ifdef COLORCURVES\n\nfloat luma=getLuminance(result.rgb);\nvec2 curveMix=clamp(vec2(luma*3.0-1.5,luma*-3.0+1.5),vec2(0.0),vec2(1.0));\nvec4 colorCurve=vCameraColorCurveNeutral+curveMix.x*vCameraColorCurvePositive-curveMix.y*vCameraColorCurveNegative;\nresult.rgb*=colorCurve.rgb;\nresult.rgb=mix(vec3(luma),result.rgb,colorCurve.a);\n#endif\nreturn result;\n}`;\n\nEffect.IncludesShadersStore[name] = shader;\n/** @hidden */\nexport var imageProcessingFunctions = { name, shader };\n"},"lineCount":null}},"error":null,"hash":"8280dfaa76863b69da6b79e34237fd29","cacheData":{"env":{}}}