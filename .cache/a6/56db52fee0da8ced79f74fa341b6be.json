{"id":"node_modules/@babylonjs/core/Shaders/particles.vertex.js","dependencies":[{"name":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\Shaders\\particles.vertex.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\package.json","includedInParent":true,"mtime":1618440501386},{"name":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\.babelrc","includedInParent":true,"mtime":1618361427593},{"name":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\package.json","includedInParent":true,"mtime":499162500000},{"name":"../Materials/effect","loc":{"line":1,"column":23},"parent":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\Shaders\\particles.vertex.js","resolved":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\Materials\\effect.js"},{"name":"./ShadersInclude/clipPlaneVertexDeclaration","loc":{"line":2,"column":7},"parent":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\Shaders\\particles.vertex.js","resolved":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\clipPlaneVertexDeclaration.js"},{"name":"./ShadersInclude/clipPlaneVertex","loc":{"line":3,"column":7},"parent":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\Shaders\\particles.vertex.js","resolved":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\clipPlaneVertex.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.particlesVertexShader = void 0;\n\nvar _effect = require(\"../Materials/effect\");\n\nrequire(\"./ShadersInclude/clipPlaneVertexDeclaration\");\n\nrequire(\"./ShadersInclude/clipPlaneVertex\");\n\nvar name = 'particlesVertexShader';\nvar shader = \"\\nattribute vec3 position;\\nattribute vec4 color;\\nattribute float angle;\\nattribute vec2 size;\\n#ifdef ANIMATESHEET\\nattribute float cellIndex;\\n#endif\\n#ifndef BILLBOARD\\nattribute vec3 direction;\\n#endif\\n#ifdef BILLBOARDSTRETCHED\\nattribute vec3 direction;\\n#endif\\n#ifdef RAMPGRADIENT\\nattribute vec4 remapData;\\n#endif\\nattribute vec2 offset;\\n\\nuniform mat4 view;\\nuniform mat4 projection;\\nuniform vec2 translationPivot;\\n#ifdef ANIMATESHEET\\nuniform vec3 particlesInfos;\\n#endif\\n\\nvarying vec2 vUV;\\nvarying vec4 vColor;\\nvarying vec3 vPositionW;\\n#ifdef RAMPGRADIENT\\nvarying vec4 remapRanges;\\n#endif\\n#if defined(BILLBOARD) && !defined(BILLBOARDY) && !defined(BILLBOARDSTRETCHED)\\nuniform mat4 invView;\\n#endif\\n#include<clipPlaneVertexDeclaration>\\n#ifdef BILLBOARD\\nuniform vec3 eyePosition;\\n#endif\\nvec3 rotate(vec3 yaxis,vec3 rotatedCorner) {\\nvec3 xaxis=normalize(cross(vec3(0.,1.0,0.),yaxis));\\nvec3 zaxis=normalize(cross(yaxis,xaxis));\\nvec3 row0=vec3(xaxis.x,xaxis.y,xaxis.z);\\nvec3 row1=vec3(yaxis.x,yaxis.y,yaxis.z);\\nvec3 row2=vec3(zaxis.x,zaxis.y,zaxis.z);\\nmat3 rotMatrix=mat3(row0,row1,row2);\\nvec3 alignedCorner=rotMatrix*rotatedCorner;\\nreturn position+alignedCorner;\\n}\\n#ifdef BILLBOARDSTRETCHED\\nvec3 rotateAlign(vec3 toCamera,vec3 rotatedCorner) {\\nvec3 normalizedToCamera=normalize(toCamera);\\nvec3 normalizedCrossDirToCamera=normalize(cross(normalize(direction),normalizedToCamera));\\nvec3 crossProduct=normalize(cross(normalizedToCamera,normalizedCrossDirToCamera));\\nvec3 row0=vec3(normalizedCrossDirToCamera.x,normalizedCrossDirToCamera.y,normalizedCrossDirToCamera.z);\\nvec3 row1=vec3(crossProduct.x,crossProduct.y,crossProduct.z);\\nvec3 row2=vec3(normalizedToCamera.x,normalizedToCamera.y,normalizedToCamera.z);\\nmat3 rotMatrix=mat3(row0,row1,row2);\\nvec3 alignedCorner=rotMatrix*rotatedCorner;\\nreturn position+alignedCorner;\\n}\\n#endif\\nvoid main(void) {\\nvec2 cornerPos;\\ncornerPos=(vec2(offset.x-0.5,offset.y-0.5)-translationPivot)*size+translationPivot;\\n#ifdef BILLBOARD\\n\\nvec3 rotatedCorner;\\n#ifdef BILLBOARDY\\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\\nrotatedCorner.z=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\\nrotatedCorner.y=0.;\\nvec3 yaxis=position-eyePosition;\\nyaxis.y=0.;\\nvPositionW=rotate(normalize(yaxis),rotatedCorner);\\nvec3 viewPos=(view*vec4(vPositionW,1.0)).xyz;\\n#elif defined(BILLBOARDSTRETCHED)\\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\\nrotatedCorner.y=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\\nrotatedCorner.z=0.;\\nvec3 toCamera=position-eyePosition;\\nvPositionW=rotateAlign(toCamera,rotatedCorner);\\nvec3 viewPos=(view*vec4(vPositionW,1.0)).xyz;\\n#else\\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\\nrotatedCorner.y=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\\nrotatedCorner.z=0.;\\nvec3 viewPos=(view*vec4(position,1.0)).xyz+rotatedCorner;\\nvPositionW=(invView*vec4(viewPos,1)).xyz;\\n#endif\\n#ifdef RAMPGRADIENT\\nremapRanges=remapData;\\n#endif\\n\\ngl_Position=projection*vec4(viewPos,1.0);\\n#else\\n\\nvec3 rotatedCorner;\\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\\nrotatedCorner.z=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\\nrotatedCorner.y=0.;\\nvec3 yaxis=normalize(direction);\\nvPositionW=rotate(yaxis,rotatedCorner);\\ngl_Position=projection*view*vec4(vPositionW,1.0);\\n#endif\\nvColor=color;\\n#ifdef ANIMATESHEET\\nfloat rowOffset=floor(cellIndex*particlesInfos.z);\\nfloat columnOffset=cellIndex-rowOffset/particlesInfos.z;\\nvec2 uvScale=particlesInfos.xy;\\nvec2 uvOffset=vec2(offset.x ,1.0-offset.y);\\nvUV=(uvOffset+vec2(columnOffset,rowOffset))*uvScale;\\n#else\\nvUV=offset;\\n#endif\\n\\n#if defined(CLIPPLANE) || defined(CLIPPLANE2) || defined(CLIPPLANE3) || defined(CLIPPLANE4) || defined(CLIPPLANE5) || defined(CLIPPLANE6)\\nvec4 worldPos=vec4(vPositionW,1.0);\\n#endif\\n#include<clipPlaneVertex>\\n}\";\n_effect.Effect.ShadersStore[name] = shader;\n/** @hidden */\n\nvar particlesVertexShader = {\n  name: name,\n  shader: shader\n};\nexports.particlesVertexShader = particlesVertexShader;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":5,"column":4},"generated":{"line":14,"column":4}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":5,"column":8},"generated":{"line":14,"column":8}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":5,"column":11},"generated":{"line":14,"column":11}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":14,"column":34}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":6,"column":4},"generated":{"line":15,"column":4}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":6,"column":10},"generated":{"line":15,"column":10}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":6,"column":13},"generated":{"line":15,"column":13}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":15,"column":3885}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":7},"generated":{"line":16,"column":15}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":0},"generated":{"line":16,"column":27}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":20},"generated":{"line":16,"column":28}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":0},"generated":{"line":16,"column":32}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":28},"generated":{"line":16,"column":36}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":128,"column":0},"generated":{"line":16,"column":42}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":129,"column":0},"generated":{"line":17,"column":0}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":130,"column":7},"generated":{"line":19,"column":0}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":130,"column":11},"generated":{"line":19,"column":4}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":130,"column":32},"generated":{"line":19,"column":25}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":130,"column":35},"generated":{"line":19,"column":28}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":130,"column":37},"generated":{"line":20,"column":0}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":130,"column":37},"generated":{"line":20,"column":2}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":130,"column":41},"generated":{"line":20,"column":6}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":130,"column":41},"generated":{"line":20,"column":8}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":130,"column":35},"generated":{"line":20,"column":12}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":130,"column":43},"generated":{"line":21,"column":0}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":130,"column":43},"generated":{"line":21,"column":2}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":130,"column":49},"generated":{"line":21,"column":8}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":130,"column":49},"generated":{"line":21,"column":10}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":130,"column":35},"generated":{"line":22,"column":0}},{"source":"../../../sourceES6/core/Shaders/particles.vertex.ts","name":null,"original":{"line":130,"column":7},"generated":{"line":22,"column":1}}],"sources":{"../../../sourceES6/core/Shaders/particles.vertex.ts":"import { Effect } from \"../Materials/effect\";\nimport \"./ShadersInclude/clipPlaneVertexDeclaration\";\nimport \"./ShadersInclude/clipPlaneVertex\";\n\nlet name = 'particlesVertexShader';\nlet shader = `\nattribute vec3 position;\nattribute vec4 color;\nattribute float angle;\nattribute vec2 size;\n#ifdef ANIMATESHEET\nattribute float cellIndex;\n#endif\n#ifndef BILLBOARD\nattribute vec3 direction;\n#endif\n#ifdef BILLBOARDSTRETCHED\nattribute vec3 direction;\n#endif\n#ifdef RAMPGRADIENT\nattribute vec4 remapData;\n#endif\nattribute vec2 offset;\n\nuniform mat4 view;\nuniform mat4 projection;\nuniform vec2 translationPivot;\n#ifdef ANIMATESHEET\nuniform vec3 particlesInfos;\n#endif\n\nvarying vec2 vUV;\nvarying vec4 vColor;\nvarying vec3 vPositionW;\n#ifdef RAMPGRADIENT\nvarying vec4 remapRanges;\n#endif\n#if defined(BILLBOARD) && !defined(BILLBOARDY) && !defined(BILLBOARDSTRETCHED)\nuniform mat4 invView;\n#endif\n#include<clipPlaneVertexDeclaration>\n#ifdef BILLBOARD\nuniform vec3 eyePosition;\n#endif\nvec3 rotate(vec3 yaxis,vec3 rotatedCorner) {\nvec3 xaxis=normalize(cross(vec3(0.,1.0,0.),yaxis));\nvec3 zaxis=normalize(cross(yaxis,xaxis));\nvec3 row0=vec3(xaxis.x,xaxis.y,xaxis.z);\nvec3 row1=vec3(yaxis.x,yaxis.y,yaxis.z);\nvec3 row2=vec3(zaxis.x,zaxis.y,zaxis.z);\nmat3 rotMatrix=mat3(row0,row1,row2);\nvec3 alignedCorner=rotMatrix*rotatedCorner;\nreturn position+alignedCorner;\n}\n#ifdef BILLBOARDSTRETCHED\nvec3 rotateAlign(vec3 toCamera,vec3 rotatedCorner) {\nvec3 normalizedToCamera=normalize(toCamera);\nvec3 normalizedCrossDirToCamera=normalize(cross(normalize(direction),normalizedToCamera));\nvec3 crossProduct=normalize(cross(normalizedToCamera,normalizedCrossDirToCamera));\nvec3 row0=vec3(normalizedCrossDirToCamera.x,normalizedCrossDirToCamera.y,normalizedCrossDirToCamera.z);\nvec3 row1=vec3(crossProduct.x,crossProduct.y,crossProduct.z);\nvec3 row2=vec3(normalizedToCamera.x,normalizedToCamera.y,normalizedToCamera.z);\nmat3 rotMatrix=mat3(row0,row1,row2);\nvec3 alignedCorner=rotMatrix*rotatedCorner;\nreturn position+alignedCorner;\n}\n#endif\nvoid main(void) {\nvec2 cornerPos;\ncornerPos=(vec2(offset.x-0.5,offset.y-0.5)-translationPivot)*size+translationPivot;\n#ifdef BILLBOARD\n\nvec3 rotatedCorner;\n#ifdef BILLBOARDY\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\nrotatedCorner.z=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\nrotatedCorner.y=0.;\nvec3 yaxis=position-eyePosition;\nyaxis.y=0.;\nvPositionW=rotate(normalize(yaxis),rotatedCorner);\nvec3 viewPos=(view*vec4(vPositionW,1.0)).xyz;\n#elif defined(BILLBOARDSTRETCHED)\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\nrotatedCorner.y=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\nrotatedCorner.z=0.;\nvec3 toCamera=position-eyePosition;\nvPositionW=rotateAlign(toCamera,rotatedCorner);\nvec3 viewPos=(view*vec4(vPositionW,1.0)).xyz;\n#else\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\nrotatedCorner.y=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\nrotatedCorner.z=0.;\nvec3 viewPos=(view*vec4(position,1.0)).xyz+rotatedCorner;\nvPositionW=(invView*vec4(viewPos,1)).xyz;\n#endif\n#ifdef RAMPGRADIENT\nremapRanges=remapData;\n#endif\n\ngl_Position=projection*vec4(viewPos,1.0);\n#else\n\nvec3 rotatedCorner;\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\nrotatedCorner.z=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\nrotatedCorner.y=0.;\nvec3 yaxis=normalize(direction);\nvPositionW=rotate(yaxis,rotatedCorner);\ngl_Position=projection*view*vec4(vPositionW,1.0);\n#endif\nvColor=color;\n#ifdef ANIMATESHEET\nfloat rowOffset=floor(cellIndex*particlesInfos.z);\nfloat columnOffset=cellIndex-rowOffset/particlesInfos.z;\nvec2 uvScale=particlesInfos.xy;\nvec2 uvOffset=vec2(offset.x ,1.0-offset.y);\nvUV=(uvOffset+vec2(columnOffset,rowOffset))*uvScale;\n#else\nvUV=offset;\n#endif\n\n#if defined(CLIPPLANE) || defined(CLIPPLANE2) || defined(CLIPPLANE3) || defined(CLIPPLANE4) || defined(CLIPPLANE5) || defined(CLIPPLANE6)\nvec4 worldPos=vec4(vPositionW,1.0);\n#endif\n#include<clipPlaneVertex>\n}`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var particlesVertexShader = { name, shader };\n"},"lineCount":null}},"error":null,"hash":"4593e5b6c610747d9e2069ec161f0570","cacheData":{"env":{}}}