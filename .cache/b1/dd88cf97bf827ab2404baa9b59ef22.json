{"id":"node_modules/@babylonjs/core/Shaders/gpuRenderParticles.vertex.js","dependencies":[{"name":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\Shaders\\gpuRenderParticles.vertex.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\package.json","includedInParent":true,"mtime":1619016251814},{"name":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\.babelrc","includedInParent":true,"mtime":1618361427593},{"name":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\package.json","includedInParent":true,"mtime":499162500000},{"name":"../Materials/effect","loc":{"line":1,"column":23},"parent":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\Shaders\\gpuRenderParticles.vertex.js","resolved":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\Materials\\effect.js"},{"name":"./ShadersInclude/clipPlaneVertexDeclaration2","loc":{"line":2,"column":7},"parent":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\Shaders\\gpuRenderParticles.vertex.js","resolved":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\clipPlaneVertexDeclaration2.js"},{"name":"./ShadersInclude/clipPlaneVertex","loc":{"line":3,"column":7},"parent":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\Shaders\\gpuRenderParticles.vertex.js","resolved":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\clipPlaneVertex.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.gpuRenderParticlesVertexShader = void 0;\n\nvar _effect = require(\"../Materials/effect\");\n\nrequire(\"./ShadersInclude/clipPlaneVertexDeclaration2\");\n\nrequire(\"./ShadersInclude/clipPlaneVertex\");\n\nvar name = 'gpuRenderParticlesVertexShader';\nvar shader = \"#version 300 es\\nuniform mat4 view;\\nuniform mat4 projection;\\nuniform vec2 translationPivot;\\nuniform vec3 worldOffset;\\n#ifdef LOCAL\\nuniform mat4 emitterWM;\\n#endif\\n\\nin vec3 position;\\nin float age;\\nin float life;\\nin vec3 size;\\n#ifndef BILLBOARD\\nin vec3 initialDirection;\\n#endif\\n#ifdef BILLBOARDSTRETCHED\\nin vec3 direction;\\n#endif\\nin float angle;\\n#ifdef ANIMATESHEET\\nin float cellIndex;\\n#endif\\nin vec2 offset;\\nin vec2 uv;\\nout vec2 vUV;\\nout vec4 vColor;\\nout vec3 vPositionW;\\n#if defined(BILLBOARD) && !defined(BILLBOARDY) && !defined(BILLBOARDSTRETCHED)\\nuniform mat4 invView;\\n#endif\\n#include<clipPlaneVertexDeclaration2>\\n#ifdef COLORGRADIENTS\\nuniform sampler2D colorGradientSampler;\\n#else\\nuniform vec4 colorDead;\\nin vec4 color;\\n#endif\\n#ifdef ANIMATESHEET\\nuniform vec3 sheetInfos;\\n#endif\\n#ifdef BILLBOARD\\nuniform vec3 eyePosition;\\n#endif\\nvec3 rotate(vec3 yaxis,vec3 rotatedCorner) {\\nvec3 xaxis=normalize(cross(vec3(0.,1.0,0.),yaxis));\\nvec3 zaxis=normalize(cross(yaxis,xaxis));\\nvec3 row0=vec3(xaxis.x,xaxis.y,xaxis.z);\\nvec3 row1=vec3(yaxis.x,yaxis.y,yaxis.z);\\nvec3 row2=vec3(zaxis.x,zaxis.y,zaxis.z);\\nmat3 rotMatrix=mat3(row0,row1,row2);\\nvec3 alignedCorner=rotMatrix*rotatedCorner;\\n#ifdef LOCAL\\nreturn ((emitterWM*vec4(position,1.0)).xyz+worldOffset)+alignedCorner;\\n#else\\nreturn (position+worldOffset)+alignedCorner;\\n#endif\\n}\\n#ifdef BILLBOARDSTRETCHED\\nvec3 rotateAlign(vec3 toCamera,vec3 rotatedCorner) {\\nvec3 normalizedToCamera=normalize(toCamera);\\nvec3 normalizedCrossDirToCamera=normalize(cross(normalize(direction),normalizedToCamera));\\nvec3 crossProduct=normalize(cross(normalizedToCamera,normalizedCrossDirToCamera));\\nvec3 row0=vec3(normalizedCrossDirToCamera.x,normalizedCrossDirToCamera.y,normalizedCrossDirToCamera.z);\\nvec3 row1=vec3(crossProduct.x,crossProduct.y,crossProduct.z);\\nvec3 row2=vec3(normalizedToCamera.x,normalizedToCamera.y,normalizedToCamera.z);\\nmat3 rotMatrix=mat3(row0,row1,row2);\\nvec3 alignedCorner=rotMatrix*rotatedCorner;\\n#ifdef LOCAL\\nreturn ((emitterWM*vec4(position,1.0)).xyz+worldOffset)+alignedCorner;\\n#else\\nreturn (position+worldOffset)+alignedCorner;\\n#endif\\n}\\n#endif\\nvoid main() {\\n#ifdef ANIMATESHEET\\nfloat rowOffset=floor(cellIndex/sheetInfos.z);\\nfloat columnOffset=cellIndex-rowOffset*sheetInfos.z;\\nvec2 uvScale=sheetInfos.xy;\\nvec2 uvOffset=vec2(uv.x ,1.0-uv.y);\\nvUV=(uvOffset+vec2(columnOffset,rowOffset))*uvScale;\\n#else\\nvUV=uv;\\n#endif\\nfloat ratio=age/life;\\n#ifdef COLORGRADIENTS\\nvColor=texture(colorGradientSampler,vec2(ratio,0));\\n#else\\nvColor=color*vec4(1.0-ratio)+colorDead*vec4(ratio);\\n#endif\\nvec2 cornerPos=(offset-translationPivot)*size.yz*size.x+translationPivot;\\n#ifdef BILLBOARD\\nvec4 rotatedCorner;\\nrotatedCorner.w=0.;\\n#ifdef BILLBOARDY\\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\\nrotatedCorner.z=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\\nrotatedCorner.y=0.;\\nvec3 yaxis=(position+worldOffset)-eyePosition;\\nyaxis.y=0.;\\nvPositionW=rotate(normalize(yaxis),rotatedCorner.xyz);\\nvec4 viewPosition=(view*vec4(vPositionW,1.0));\\n#elif defined(BILLBOARDSTRETCHED)\\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\\nrotatedCorner.y=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\\nrotatedCorner.z=0.;\\nvec3 toCamera=(position+worldOffset)-eyePosition;\\nvPositionW=rotateAlign(toCamera,rotatedCorner.xyz);\\nvec4 viewPosition=(view*vec4(vPositionW,1.0));\\n#else\\n\\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\\nrotatedCorner.y=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\\nrotatedCorner.z=0.;\\n\\n#ifdef LOCAL\\nvec4 viewPosition=view*vec4(((emitterWM*vec4(position,1.0)).xyz+worldOffset),1.0)+rotatedCorner;\\n#else\\nvec4 viewPosition=view*vec4((position+worldOffset),1.0)+rotatedCorner;\\n#endif\\nvPositionW=(invView*viewPosition).xyz;\\n#endif\\n#else\\n\\nvec3 rotatedCorner;\\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\\nrotatedCorner.y=0.;\\nrotatedCorner.z=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\\nvec3 yaxis=normalize(initialDirection);\\nvPositionW=rotate(yaxis,rotatedCorner);\\n\\nvec4 viewPosition=view*vec4(vPositionW,1.0);\\n#endif\\ngl_Position=projection*viewPosition;\\n\\n#if defined(CLIPPLANE) || defined(CLIPPLANE2) || defined(CLIPPLANE3) || defined(CLIPPLANE4) || defined(CLIPPLANE5) || defined(CLIPPLANE6)\\nvec4 worldPos=vec4(vPositionW,1.0);\\n#endif\\n#include<clipPlaneVertex>\\n}\";\n_effect.Effect.ShadersStore[name] = shader;\n/** @hidden */\n\nvar gpuRenderParticlesVertexShader = {\n  name: name,\n  shader: shader\n};\nexports.gpuRenderParticlesVertexShader = gpuRenderParticlesVertexShader;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":5,"column":4},"generated":{"line":14,"column":4}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":5,"column":8},"generated":{"line":14,"column":8}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":5,"column":11},"generated":{"line":14,"column":11}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":14,"column":43}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":6,"column":4},"generated":{"line":15,"column":4}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":6,"column":10},"generated":{"line":15,"column":10}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":6,"column":13},"generated":{"line":15,"column":13}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":15,"column":4413}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":148,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":148,"column":7},"generated":{"line":16,"column":15}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":148,"column":0},"generated":{"line":16,"column":27}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":148,"column":20},"generated":{"line":16,"column":28}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":148,"column":0},"generated":{"line":16,"column":32}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":148,"column":28},"generated":{"line":16,"column":36}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":148,"column":0},"generated":{"line":16,"column":42}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":149,"column":0},"generated":{"line":17,"column":0}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":150,"column":7},"generated":{"line":19,"column":0}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":150,"column":11},"generated":{"line":19,"column":4}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":150,"column":41},"generated":{"line":19,"column":34}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":150,"column":44},"generated":{"line":19,"column":37}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":150,"column":46},"generated":{"line":20,"column":0}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":150,"column":46},"generated":{"line":20,"column":2}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":150,"column":50},"generated":{"line":20,"column":6}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":150,"column":50},"generated":{"line":20,"column":8}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":150,"column":44},"generated":{"line":20,"column":12}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":150,"column":52},"generated":{"line":21,"column":0}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":150,"column":52},"generated":{"line":21,"column":2}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":150,"column":58},"generated":{"line":21,"column":8}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":150,"column":58},"generated":{"line":21,"column":10}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":150,"column":44},"generated":{"line":22,"column":0}},{"source":"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts","name":null,"original":{"line":150,"column":7},"generated":{"line":22,"column":1}}],"sources":{"../../../sourceES6/core/Shaders/gpuRenderParticles.vertex.ts":"import { Effect } from \"../Materials/effect\";\nimport \"./ShadersInclude/clipPlaneVertexDeclaration2\";\nimport \"./ShadersInclude/clipPlaneVertex\";\n\nlet name = 'gpuRenderParticlesVertexShader';\nlet shader = `#version 300 es\nuniform mat4 view;\nuniform mat4 projection;\nuniform vec2 translationPivot;\nuniform vec3 worldOffset;\n#ifdef LOCAL\nuniform mat4 emitterWM;\n#endif\n\nin vec3 position;\nin float age;\nin float life;\nin vec3 size;\n#ifndef BILLBOARD\nin vec3 initialDirection;\n#endif\n#ifdef BILLBOARDSTRETCHED\nin vec3 direction;\n#endif\nin float angle;\n#ifdef ANIMATESHEET\nin float cellIndex;\n#endif\nin vec2 offset;\nin vec2 uv;\nout vec2 vUV;\nout vec4 vColor;\nout vec3 vPositionW;\n#if defined(BILLBOARD) && !defined(BILLBOARDY) && !defined(BILLBOARDSTRETCHED)\nuniform mat4 invView;\n#endif\n#include<clipPlaneVertexDeclaration2>\n#ifdef COLORGRADIENTS\nuniform sampler2D colorGradientSampler;\n#else\nuniform vec4 colorDead;\nin vec4 color;\n#endif\n#ifdef ANIMATESHEET\nuniform vec3 sheetInfos;\n#endif\n#ifdef BILLBOARD\nuniform vec3 eyePosition;\n#endif\nvec3 rotate(vec3 yaxis,vec3 rotatedCorner) {\nvec3 xaxis=normalize(cross(vec3(0.,1.0,0.),yaxis));\nvec3 zaxis=normalize(cross(yaxis,xaxis));\nvec3 row0=vec3(xaxis.x,xaxis.y,xaxis.z);\nvec3 row1=vec3(yaxis.x,yaxis.y,yaxis.z);\nvec3 row2=vec3(zaxis.x,zaxis.y,zaxis.z);\nmat3 rotMatrix=mat3(row0,row1,row2);\nvec3 alignedCorner=rotMatrix*rotatedCorner;\n#ifdef LOCAL\nreturn ((emitterWM*vec4(position,1.0)).xyz+worldOffset)+alignedCorner;\n#else\nreturn (position+worldOffset)+alignedCorner;\n#endif\n}\n#ifdef BILLBOARDSTRETCHED\nvec3 rotateAlign(vec3 toCamera,vec3 rotatedCorner) {\nvec3 normalizedToCamera=normalize(toCamera);\nvec3 normalizedCrossDirToCamera=normalize(cross(normalize(direction),normalizedToCamera));\nvec3 crossProduct=normalize(cross(normalizedToCamera,normalizedCrossDirToCamera));\nvec3 row0=vec3(normalizedCrossDirToCamera.x,normalizedCrossDirToCamera.y,normalizedCrossDirToCamera.z);\nvec3 row1=vec3(crossProduct.x,crossProduct.y,crossProduct.z);\nvec3 row2=vec3(normalizedToCamera.x,normalizedToCamera.y,normalizedToCamera.z);\nmat3 rotMatrix=mat3(row0,row1,row2);\nvec3 alignedCorner=rotMatrix*rotatedCorner;\n#ifdef LOCAL\nreturn ((emitterWM*vec4(position,1.0)).xyz+worldOffset)+alignedCorner;\n#else\nreturn (position+worldOffset)+alignedCorner;\n#endif\n}\n#endif\nvoid main() {\n#ifdef ANIMATESHEET\nfloat rowOffset=floor(cellIndex/sheetInfos.z);\nfloat columnOffset=cellIndex-rowOffset*sheetInfos.z;\nvec2 uvScale=sheetInfos.xy;\nvec2 uvOffset=vec2(uv.x ,1.0-uv.y);\nvUV=(uvOffset+vec2(columnOffset,rowOffset))*uvScale;\n#else\nvUV=uv;\n#endif\nfloat ratio=age/life;\n#ifdef COLORGRADIENTS\nvColor=texture(colorGradientSampler,vec2(ratio,0));\n#else\nvColor=color*vec4(1.0-ratio)+colorDead*vec4(ratio);\n#endif\nvec2 cornerPos=(offset-translationPivot)*size.yz*size.x+translationPivot;\n#ifdef BILLBOARD\nvec4 rotatedCorner;\nrotatedCorner.w=0.;\n#ifdef BILLBOARDY\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\nrotatedCorner.z=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\nrotatedCorner.y=0.;\nvec3 yaxis=(position+worldOffset)-eyePosition;\nyaxis.y=0.;\nvPositionW=rotate(normalize(yaxis),rotatedCorner.xyz);\nvec4 viewPosition=(view*vec4(vPositionW,1.0));\n#elif defined(BILLBOARDSTRETCHED)\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\nrotatedCorner.y=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\nrotatedCorner.z=0.;\nvec3 toCamera=(position+worldOffset)-eyePosition;\nvPositionW=rotateAlign(toCamera,rotatedCorner.xyz);\nvec4 viewPosition=(view*vec4(vPositionW,1.0));\n#else\n\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\nrotatedCorner.y=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\nrotatedCorner.z=0.;\n\n#ifdef LOCAL\nvec4 viewPosition=view*vec4(((emitterWM*vec4(position,1.0)).xyz+worldOffset),1.0)+rotatedCorner;\n#else\nvec4 viewPosition=view*vec4((position+worldOffset),1.0)+rotatedCorner;\n#endif\nvPositionW=(invView*viewPosition).xyz;\n#endif\n#else\n\nvec3 rotatedCorner;\nrotatedCorner.x=cornerPos.x*cos(angle)-cornerPos.y*sin(angle);\nrotatedCorner.y=0.;\nrotatedCorner.z=cornerPos.x*sin(angle)+cornerPos.y*cos(angle);\nvec3 yaxis=normalize(initialDirection);\nvPositionW=rotate(yaxis,rotatedCorner);\n\nvec4 viewPosition=view*vec4(vPositionW,1.0);\n#endif\ngl_Position=projection*viewPosition;\n\n#if defined(CLIPPLANE) || defined(CLIPPLANE2) || defined(CLIPPLANE3) || defined(CLIPPLANE4) || defined(CLIPPLANE5) || defined(CLIPPLANE6)\nvec4 worldPos=vec4(vPositionW,1.0);\n#endif\n#include<clipPlaneVertex>\n}`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var gpuRenderParticlesVertexShader = { name, shader };\n"},"lineCount":null}},"error":null,"hash":"8c64223f01ac8719c8d4552525fa8b9d","cacheData":{"env":{}}}