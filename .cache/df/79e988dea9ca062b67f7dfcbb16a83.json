{"id":"node_modules/@babylonjs/core/Shaders/ShadersInclude/pbrHelperFunctions.js","dependencies":[{"name":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\pbrHelperFunctions.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\package.json","includedInParent":true,"mtime":1619046869845},{"name":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\.babelrc","includedInParent":true,"mtime":1618361427593},{"name":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\package.json","includedInParent":true,"mtime":499162500000},{"name":"../../Materials/effect","loc":{"line":1,"column":23},"parent":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\Shaders\\ShadersInclude\\pbrHelperFunctions.js","resolved":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\Materials\\effect.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pbrHelperFunctions = void 0;\n\nvar _effect = require(\"../../Materials/effect\");\n\nvar name = 'pbrHelperFunctions';\nvar shader = \"\\n#define RECIPROCAL_PI2 0.15915494\\n#define RECIPROCAL_PI 0.31830988618\\n\\n#define MINIMUMVARIANCE 0.0005\\nfloat convertRoughnessToAverageSlope(float roughness)\\n{\\n\\nreturn square(roughness)+MINIMUMVARIANCE;\\n}\\nfloat fresnelGrazingReflectance(float reflectance0) {\\n\\n\\nfloat reflectance90=saturate(reflectance0*25.0);\\nreturn reflectance90;\\n}\\nvec2 getAARoughnessFactors(vec3 normalVector) {\\n#ifdef SPECULARAA\\nvec3 nDfdx=dFdx(normalVector.xyz);\\nvec3 nDfdy=dFdy(normalVector.xyz);\\nfloat slopeSquare=max(dot(nDfdx,nDfdx),dot(nDfdy,nDfdy));\\n\\nfloat geometricRoughnessFactor=pow(saturate(slopeSquare),0.333);\\n\\nfloat geometricAlphaGFactor=sqrt(slopeSquare);\\n\\ngeometricAlphaGFactor*=0.75;\\nreturn vec2(geometricRoughnessFactor,geometricAlphaGFactor);\\n#else\\nreturn vec2(0.);\\n#endif\\n}\\n#ifdef ANISOTROPIC\\n\\n\\nvec2 getAnisotropicRoughness(float alphaG,float anisotropy) {\\nfloat alphaT=max(alphaG*(1.0+anisotropy),MINIMUMVARIANCE);\\nfloat alphaB=max(alphaG*(1.0-anisotropy),MINIMUMVARIANCE);\\nreturn vec2(alphaT,alphaB);\\n}\\n\\n\\nvec3 getAnisotropicBentNormals(const vec3 T,const vec3 B,const vec3 N,const vec3 V,float anisotropy) {\\nvec3 anisotropicFrameDirection=anisotropy>=0.0 ? B : T;\\nvec3 anisotropicFrameTangent=cross(normalize(anisotropicFrameDirection),V);\\nvec3 anisotropicFrameNormal=cross(anisotropicFrameTangent,anisotropicFrameDirection);\\nvec3 anisotropicNormal=normalize(mix(N,anisotropicFrameNormal,abs(anisotropy)));\\nreturn anisotropicNormal;\\n\\n}\\n#endif\\n#if defined(CLEARCOAT) || defined(SS_REFRACTION)\\n\\n\\n\\nvec3 cocaLambert(vec3 alpha,float distance) {\\nreturn exp(-alpha*distance);\\n}\\n\\nvec3 cocaLambert(float NdotVRefract,float NdotLRefract,vec3 alpha,float thickness) {\\nreturn cocaLambert(alpha,(thickness*((NdotLRefract+NdotVRefract)/(NdotLRefract*NdotVRefract))));\\n}\\n\\nvec3 computeColorAtDistanceInMedia(vec3 color,float distance) {\\nreturn -log(color)/distance;\\n}\\nvec3 computeClearCoatAbsorption(float NdotVRefract,float NdotLRefract,vec3 clearCoatColor,float clearCoatThickness,float clearCoatIntensity) {\\nvec3 clearCoatAbsorption=mix(vec3(1.0),\\ncocaLambert(NdotVRefract,NdotLRefract,clearCoatColor,clearCoatThickness),\\nclearCoatIntensity);\\nreturn clearCoatAbsorption;\\n}\\n#endif\\n\\n\\n\\n\\n#ifdef MICROSURFACEAUTOMATIC\\nfloat computeDefaultMicroSurface(float microSurface,vec3 reflectivityColor)\\n{\\nconst float kReflectivityNoAlphaWorkflow_SmoothnessMax=0.95;\\nfloat reflectivityLuminance=getLuminance(reflectivityColor);\\nfloat reflectivityLuma=sqrt(reflectivityLuminance);\\nmicroSurface=reflectivityLuma*kReflectivityNoAlphaWorkflow_SmoothnessMax;\\nreturn microSurface;\\n}\\n#endif\";\n_effect.Effect.IncludesShadersStore[name] = shader;\n/** @hidden */\n\nvar pbrHelperFunctions = {\n  name: name,\n  shader: shader\n};\nexports.pbrHelperFunctions = pbrHelperFunctions;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":3,"column":4},"generated":{"line":10,"column":4}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":3,"column":8},"generated":{"line":10,"column":8}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":3,"column":11},"generated":{"line":10,"column":11}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":31}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":4,"column":4},"generated":{"line":11,"column":4}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":4,"column":10},"generated":{"line":11,"column":10}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":4,"column":13},"generated":{"line":11,"column":13}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":11,"column":2649}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":92,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":92,"column":7},"generated":{"line":12,"column":15}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":92,"column":0},"generated":{"line":12,"column":35}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":92,"column":28},"generated":{"line":12,"column":36}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":92,"column":0},"generated":{"line":12,"column":40}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":92,"column":36},"generated":{"line":12,"column":44}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":92,"column":0},"generated":{"line":12,"column":50}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":93,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":94,"column":7},"generated":{"line":15,"column":0}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":94,"column":11},"generated":{"line":15,"column":4}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":94,"column":29},"generated":{"line":15,"column":22}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":94,"column":32},"generated":{"line":15,"column":25}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":94,"column":34},"generated":{"line":16,"column":0}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":94,"column":34},"generated":{"line":16,"column":2}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":94,"column":38},"generated":{"line":16,"column":6}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":94,"column":38},"generated":{"line":16,"column":8}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":94,"column":32},"generated":{"line":16,"column":12}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":94,"column":40},"generated":{"line":17,"column":0}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":94,"column":40},"generated":{"line":17,"column":2}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":94,"column":46},"generated":{"line":17,"column":8}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":94,"column":46},"generated":{"line":17,"column":10}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":94,"column":32},"generated":{"line":18,"column":0}},{"source":"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts","name":null,"original":{"line":94,"column":7},"generated":{"line":18,"column":1}}],"sources":{"../../../../sourceES6/core/Shaders/ShadersInclude/pbrHelperFunctions.ts":"import { Effect } from \"../../Materials/effect\";\n\nlet name = 'pbrHelperFunctions';\nlet shader = `\n#define RECIPROCAL_PI2 0.15915494\n#define RECIPROCAL_PI 0.31830988618\n\n#define MINIMUMVARIANCE 0.0005\nfloat convertRoughnessToAverageSlope(float roughness)\n{\n\nreturn square(roughness)+MINIMUMVARIANCE;\n}\nfloat fresnelGrazingReflectance(float reflectance0) {\n\n\nfloat reflectance90=saturate(reflectance0*25.0);\nreturn reflectance90;\n}\nvec2 getAARoughnessFactors(vec3 normalVector) {\n#ifdef SPECULARAA\nvec3 nDfdx=dFdx(normalVector.xyz);\nvec3 nDfdy=dFdy(normalVector.xyz);\nfloat slopeSquare=max(dot(nDfdx,nDfdx),dot(nDfdy,nDfdy));\n\nfloat geometricRoughnessFactor=pow(saturate(slopeSquare),0.333);\n\nfloat geometricAlphaGFactor=sqrt(slopeSquare);\n\ngeometricAlphaGFactor*=0.75;\nreturn vec2(geometricRoughnessFactor,geometricAlphaGFactor);\n#else\nreturn vec2(0.);\n#endif\n}\n#ifdef ANISOTROPIC\n\n\nvec2 getAnisotropicRoughness(float alphaG,float anisotropy) {\nfloat alphaT=max(alphaG*(1.0+anisotropy),MINIMUMVARIANCE);\nfloat alphaB=max(alphaG*(1.0-anisotropy),MINIMUMVARIANCE);\nreturn vec2(alphaT,alphaB);\n}\n\n\nvec3 getAnisotropicBentNormals(const vec3 T,const vec3 B,const vec3 N,const vec3 V,float anisotropy) {\nvec3 anisotropicFrameDirection=anisotropy>=0.0 ? B : T;\nvec3 anisotropicFrameTangent=cross(normalize(anisotropicFrameDirection),V);\nvec3 anisotropicFrameNormal=cross(anisotropicFrameTangent,anisotropicFrameDirection);\nvec3 anisotropicNormal=normalize(mix(N,anisotropicFrameNormal,abs(anisotropy)));\nreturn anisotropicNormal;\n\n}\n#endif\n#if defined(CLEARCOAT) || defined(SS_REFRACTION)\n\n\n\nvec3 cocaLambert(vec3 alpha,float distance) {\nreturn exp(-alpha*distance);\n}\n\nvec3 cocaLambert(float NdotVRefract,float NdotLRefract,vec3 alpha,float thickness) {\nreturn cocaLambert(alpha,(thickness*((NdotLRefract+NdotVRefract)/(NdotLRefract*NdotVRefract))));\n}\n\nvec3 computeColorAtDistanceInMedia(vec3 color,float distance) {\nreturn -log(color)/distance;\n}\nvec3 computeClearCoatAbsorption(float NdotVRefract,float NdotLRefract,vec3 clearCoatColor,float clearCoatThickness,float clearCoatIntensity) {\nvec3 clearCoatAbsorption=mix(vec3(1.0),\ncocaLambert(NdotVRefract,NdotLRefract,clearCoatColor,clearCoatThickness),\nclearCoatIntensity);\nreturn clearCoatAbsorption;\n}\n#endif\n\n\n\n\n#ifdef MICROSURFACEAUTOMATIC\nfloat computeDefaultMicroSurface(float microSurface,vec3 reflectivityColor)\n{\nconst float kReflectivityNoAlphaWorkflow_SmoothnessMax=0.95;\nfloat reflectivityLuminance=getLuminance(reflectivityColor);\nfloat reflectivityLuma=sqrt(reflectivityLuminance);\nmicroSurface=reflectivityLuma*kReflectivityNoAlphaWorkflow_SmoothnessMax;\nreturn microSurface;\n}\n#endif`;\n\nEffect.IncludesShadersStore[name] = shader;\n/** @hidden */\nexport var pbrHelperFunctions = { name, shader };\n"},"lineCount":null}},"error":null,"hash":"a7ffeccf373c13ada7d68d405a72b436","cacheData":{"env":{}}}