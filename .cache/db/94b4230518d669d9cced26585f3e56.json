{"id":"node_modules/@babylonjs/core/Shaders/screenSpaceReflection.fragment.js","dependencies":[{"name":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\Shaders\\screenSpaceReflection.fragment.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\package.json","includedInParent":true,"mtime":1619046869845},{"name":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\.babelrc","includedInParent":true,"mtime":1618361427593},{"name":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\package.json","includedInParent":true,"mtime":499162500000},{"name":"../Materials/effect","loc":{"line":1,"column":23},"parent":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\Shaders\\screenSpaceReflection.fragment.js","resolved":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\Materials\\effect.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.screenSpaceReflectionPixelShader = void 0;\n\nvar _effect = require(\"../Materials/effect\");\n\nvar name = 'screenSpaceReflectionPixelShader';\nvar shader = \"\\n\\nuniform sampler2D textureSampler;\\nuniform sampler2D normalSampler;\\nuniform sampler2D positionSampler;\\nuniform sampler2D reflectivitySampler;\\nuniform mat4 view;\\nuniform mat4 projection;\\nuniform float step;\\nuniform float strength;\\nuniform float threshold;\\nuniform float roughnessFactor;\\nuniform float reflectionSpecularFalloffExponent;\\n\\nvarying vec2 vUV;\\n\\nstruct ReflectionInfo {\\nvec3 color;\\nvec4 coords;\\n};\\n\\nvec3 fresnelSchlick(float cosTheta,vec3 F0)\\n{\\nreturn F0+(1.0-F0)*pow(1.0-cosTheta,5.0);\\n}\\n\\nReflectionInfo smoothReflectionInfo(vec3 dir,vec3 hitCoord)\\n{\\nReflectionInfo info;\\ninfo.color=vec3(0.0);\\nvec4 projectedCoord;\\nfloat sampledDepth;\\nfor(int i=0; i<SMOOTH_STEPS; i++)\\n{\\nprojectedCoord=projection*vec4(hitCoord,1.0);\\nprojectedCoord.xy/=projectedCoord.w;\\nprojectedCoord.xy=0.5*projectedCoord.xy+vec2(0.5);\\nsampledDepth=(view*texture2D(positionSampler,projectedCoord.xy)).z;\\nfloat depth=sampledDepth-hitCoord.z;\\ndir*=0.5;\\nif(depth>0.0)\\nhitCoord-=dir;\\nelse\\nhitCoord+=dir;\\ninfo.color+=texture2D(textureSampler,projectedCoord.xy).rgb;\\n}\\nprojectedCoord=projection*vec4(hitCoord,1.0);\\nprojectedCoord.xy/=projectedCoord.w;\\nprojectedCoord.xy=0.5*projectedCoord.xy+vec2(0.5);\\n\\ninfo.coords=vec4(projectedCoord.xy,sampledDepth,1.0);\\ninfo.color+=texture2D(textureSampler,projectedCoord.xy).rgb;\\ninfo.color/=float(SMOOTH_STEPS+1);\\nreturn info;\\n}\\n\\nReflectionInfo getReflectionInfo(vec3 dir,vec3 hitCoord)\\n{\\nReflectionInfo info;\\nvec4 projectedCoord;\\nfloat sampledDepth;\\ndir*=step;\\nfor(int i=0; i<REFLECTION_SAMPLES; i++)\\n{\\nhitCoord+=dir;\\nprojectedCoord=projection*vec4(hitCoord,1.0);\\nprojectedCoord.xy/=projectedCoord.w;\\nprojectedCoord.xy=0.5*projectedCoord.xy+vec2(0.5);\\nsampledDepth=(view*texture2D(positionSampler,projectedCoord.xy)).z;\\nfloat depth=sampledDepth-hitCoord.z;\\nif(((depth-dir.z)<threshold) && depth<=0.0)\\n{\\n#ifdef ENABLE_SMOOTH_REFLECTIONS\\nreturn smoothReflectionInfo(dir,hitCoord);\\n#else\\ninfo.color=texture2D(textureSampler,projectedCoord.xy).rgb;\\ninfo.coords=vec4(projectedCoord.xy,sampledDepth,0.0);\\nreturn info;\\n#endif\\n}\\n}\\ninfo.color=texture2D(textureSampler,projectedCoord.xy).rgb;\\ninfo.coords=vec4(projectedCoord.xy,sampledDepth,0.0);\\nreturn info;\\n}\\nvec3 hash(vec3 a)\\n{\\na=fract(a*0.8);\\na+=dot(a,a.yxz+19.19);\\nreturn fract((a.xxy+a.yxx)*a.zyx);\\n}\\nvoid main()\\n{\\n#ifdef SSR_SUPPORTED\\n\\nvec4 albedoFull=texture2D(textureSampler,vUV);\\nvec3 albedo=albedoFull.rgb;\\nfloat spec=texture2D(reflectivitySampler,vUV).r;\\nif (spec == 0.0) {\\ngl_FragColor=albedoFull;\\nreturn;\\n}\\n\\n#ifdef PREPASS_LAYOUT\\nvec3 normal=(texture2D(normalSampler,vUV)).gba;\\n#else\\nvec3 normal=(texture2D(normalSampler,vUV)).xyz;\\n#endif\\nvec3 position=(view*texture2D(positionSampler,vUV)).xyz;\\nvec3 reflected=normalize(reflect(normalize(position),normalize(normal)));\\nfloat roughness=1.0-texture2D(reflectivitySampler,vUV).a;\\nvec3 jitt=mix(vec3(0.0),hash(position),roughness)*roughnessFactor;\\nReflectionInfo info=getReflectionInfo(jitt+reflected,position);\\n\\nvec2 dCoords=smoothstep(0.2,0.6,abs(vec2(0.5,0.5)-info.coords.xy));\\nfloat screenEdgefactor=clamp(1.0-(dCoords.x+dCoords.y),0.0,1.0);\\n\\nvec3 F0=vec3(0.04);\\nF0=mix(F0,albedo,spec);\\nvec3 fresnel=fresnelSchlick(max(dot(normalize(normal),normalize(position)),0.0),F0);\\n\\nfloat reflectionMultiplier=clamp(pow(spec*strength,reflectionSpecularFalloffExponent)*screenEdgefactor*reflected.z,0.0,0.9);\\nfloat albedoMultiplier=1.0-reflectionMultiplier;\\nvec3 SSR=info.color*fresnel;\\ngl_FragColor=vec4((albedo*albedoMultiplier)+(SSR*reflectionMultiplier),albedoFull.a);\\n#else\\ngl_FragColor=texture2D(textureSampler,vUV);\\n#endif\\n}\\n\";\n_effect.Effect.ShadersStore[name] = shader;\n/** @hidden */\n\nvar screenSpaceReflectionPixelShader = {\n  name: name,\n  shader: shader\n};\nexports.screenSpaceReflectionPixelShader = screenSpaceReflectionPixelShader;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":3,"column":4},"generated":{"line":10,"column":4}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":3,"column":8},"generated":{"line":10,"column":8}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":3,"column":11},"generated":{"line":10,"column":11}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":45}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":4,"column":4},"generated":{"line":11,"column":4}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":4,"column":10},"generated":{"line":11,"column":10}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":4,"column":13},"generated":{"line":11,"column":13}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":11,"column":3686}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":135,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":135,"column":7},"generated":{"line":12,"column":15}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":135,"column":0},"generated":{"line":12,"column":27}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":135,"column":20},"generated":{"line":12,"column":28}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":135,"column":0},"generated":{"line":12,"column":32}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":135,"column":28},"generated":{"line":12,"column":36}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":135,"column":0},"generated":{"line":12,"column":42}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":136,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":137,"column":7},"generated":{"line":15,"column":0}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":137,"column":11},"generated":{"line":15,"column":4}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":137,"column":43},"generated":{"line":15,"column":36}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":137,"column":46},"generated":{"line":15,"column":39}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":137,"column":48},"generated":{"line":16,"column":0}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":137,"column":48},"generated":{"line":16,"column":2}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":137,"column":52},"generated":{"line":16,"column":6}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":137,"column":52},"generated":{"line":16,"column":8}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":137,"column":46},"generated":{"line":16,"column":12}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":137,"column":54},"generated":{"line":17,"column":0}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":137,"column":54},"generated":{"line":17,"column":2}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":137,"column":60},"generated":{"line":17,"column":8}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":137,"column":60},"generated":{"line":17,"column":10}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":137,"column":46},"generated":{"line":18,"column":0}},{"source":"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts","name":null,"original":{"line":137,"column":7},"generated":{"line":18,"column":1}}],"sources":{"../../../sourceES6/core/Shaders/screenSpaceReflection.fragment.ts":"import { Effect } from \"../Materials/effect\";\n\nlet name = 'screenSpaceReflectionPixelShader';\nlet shader = `\n\nuniform sampler2D textureSampler;\nuniform sampler2D normalSampler;\nuniform sampler2D positionSampler;\nuniform sampler2D reflectivitySampler;\nuniform mat4 view;\nuniform mat4 projection;\nuniform float step;\nuniform float strength;\nuniform float threshold;\nuniform float roughnessFactor;\nuniform float reflectionSpecularFalloffExponent;\n\nvarying vec2 vUV;\n\nstruct ReflectionInfo {\nvec3 color;\nvec4 coords;\n};\n\nvec3 fresnelSchlick(float cosTheta,vec3 F0)\n{\nreturn F0+(1.0-F0)*pow(1.0-cosTheta,5.0);\n}\n\nReflectionInfo smoothReflectionInfo(vec3 dir,vec3 hitCoord)\n{\nReflectionInfo info;\ninfo.color=vec3(0.0);\nvec4 projectedCoord;\nfloat sampledDepth;\nfor(int i=0; i<SMOOTH_STEPS; i++)\n{\nprojectedCoord=projection*vec4(hitCoord,1.0);\nprojectedCoord.xy/=projectedCoord.w;\nprojectedCoord.xy=0.5*projectedCoord.xy+vec2(0.5);\nsampledDepth=(view*texture2D(positionSampler,projectedCoord.xy)).z;\nfloat depth=sampledDepth-hitCoord.z;\ndir*=0.5;\nif(depth>0.0)\nhitCoord-=dir;\nelse\nhitCoord+=dir;\ninfo.color+=texture2D(textureSampler,projectedCoord.xy).rgb;\n}\nprojectedCoord=projection*vec4(hitCoord,1.0);\nprojectedCoord.xy/=projectedCoord.w;\nprojectedCoord.xy=0.5*projectedCoord.xy+vec2(0.5);\n\ninfo.coords=vec4(projectedCoord.xy,sampledDepth,1.0);\ninfo.color+=texture2D(textureSampler,projectedCoord.xy).rgb;\ninfo.color/=float(SMOOTH_STEPS+1);\nreturn info;\n}\n\nReflectionInfo getReflectionInfo(vec3 dir,vec3 hitCoord)\n{\nReflectionInfo info;\nvec4 projectedCoord;\nfloat sampledDepth;\ndir*=step;\nfor(int i=0; i<REFLECTION_SAMPLES; i++)\n{\nhitCoord+=dir;\nprojectedCoord=projection*vec4(hitCoord,1.0);\nprojectedCoord.xy/=projectedCoord.w;\nprojectedCoord.xy=0.5*projectedCoord.xy+vec2(0.5);\nsampledDepth=(view*texture2D(positionSampler,projectedCoord.xy)).z;\nfloat depth=sampledDepth-hitCoord.z;\nif(((depth-dir.z)<threshold) && depth<=0.0)\n{\n#ifdef ENABLE_SMOOTH_REFLECTIONS\nreturn smoothReflectionInfo(dir,hitCoord);\n#else\ninfo.color=texture2D(textureSampler,projectedCoord.xy).rgb;\ninfo.coords=vec4(projectedCoord.xy,sampledDepth,0.0);\nreturn info;\n#endif\n}\n}\ninfo.color=texture2D(textureSampler,projectedCoord.xy).rgb;\ninfo.coords=vec4(projectedCoord.xy,sampledDepth,0.0);\nreturn info;\n}\nvec3 hash(vec3 a)\n{\na=fract(a*0.8);\na+=dot(a,a.yxz+19.19);\nreturn fract((a.xxy+a.yxx)*a.zyx);\n}\nvoid main()\n{\n#ifdef SSR_SUPPORTED\n\nvec4 albedoFull=texture2D(textureSampler,vUV);\nvec3 albedo=albedoFull.rgb;\nfloat spec=texture2D(reflectivitySampler,vUV).r;\nif (spec == 0.0) {\ngl_FragColor=albedoFull;\nreturn;\n}\n\n#ifdef PREPASS_LAYOUT\nvec3 normal=(texture2D(normalSampler,vUV)).gba;\n#else\nvec3 normal=(texture2D(normalSampler,vUV)).xyz;\n#endif\nvec3 position=(view*texture2D(positionSampler,vUV)).xyz;\nvec3 reflected=normalize(reflect(normalize(position),normalize(normal)));\nfloat roughness=1.0-texture2D(reflectivitySampler,vUV).a;\nvec3 jitt=mix(vec3(0.0),hash(position),roughness)*roughnessFactor;\nReflectionInfo info=getReflectionInfo(jitt+reflected,position);\n\nvec2 dCoords=smoothstep(0.2,0.6,abs(vec2(0.5,0.5)-info.coords.xy));\nfloat screenEdgefactor=clamp(1.0-(dCoords.x+dCoords.y),0.0,1.0);\n\nvec3 F0=vec3(0.04);\nF0=mix(F0,albedo,spec);\nvec3 fresnel=fresnelSchlick(max(dot(normalize(normal),normalize(position)),0.0),F0);\n\nfloat reflectionMultiplier=clamp(pow(spec*strength,reflectionSpecularFalloffExponent)*screenEdgefactor*reflected.z,0.0,0.9);\nfloat albedoMultiplier=1.0-reflectionMultiplier;\nvec3 SSR=info.color*fresnel;\ngl_FragColor=vec4((albedo*albedoMultiplier)+(SSR*reflectionMultiplier),albedoFull.a);\n#else\ngl_FragColor=texture2D(textureSampler,vUV);\n#endif\n}\n`;\n\nEffect.ShadersStore[name] = shader;\n/** @hidden */\nexport var screenSpaceReflectionPixelShader = { name, shader };\n"},"lineCount":null}},"error":null,"hash":"6302708e5452af5ee64952321e5c3c70","cacheData":{"env":{}}}