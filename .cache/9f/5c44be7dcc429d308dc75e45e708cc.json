{"id":"node_modules/@babylonjs/core/Materials/Node/Optimizers/nodeMaterialOptimizer.js","dependencies":[{"name":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\Materials\\Node\\Optimizers\\nodeMaterialOptimizer.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\package.json","includedInParent":true,"mtime":1618615549721},{"name":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\.babelrc","includedInParent":true,"mtime":1618361427593},{"name":"C:\\Users\\varun\\Documents\\Visual Studio\\varun-unnithan\\node_modules\\@babylonjs\\core\\package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeMaterialOptimizer = void 0;\n\n/**\r\n * Root class for all node material optimizers\r\n */\nvar NodeMaterialOptimizer =\n/** @class */\nfunction () {\n  function NodeMaterialOptimizer() {}\n  /**\r\n   * Function used to optimize a NodeMaterial graph\r\n   * @param vertexOutputNodes defines the list of output nodes for the vertex shader\r\n   * @param fragmentOutputNodes defines the list of output nodes for the fragment shader\r\n   */\n\n\n  NodeMaterialOptimizer.prototype.optimize = function (vertexOutputNodes, fragmentOutputNodes) {// Do nothing by default\n  };\n\n  return NodeMaterialOptimizer;\n}();\n\nexports.NodeMaterialOptimizer = NodeMaterialOptimizer;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":11,"column":4}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":11,"column":25}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":13,"column":12}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":14,"column":11}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":14,"column":32}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":14,"column":35}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":15,"column":1},"generated":{"line":14,"column":36}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":7,"column":4},"generated":{"line":15,"column":0}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":12,"column":11},"generated":{"line":22,"column":0}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":12,"column":11},"generated":{"line":22,"column":2}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":12,"column":11},"generated":{"line":22,"column":23}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":12,"column":11},"generated":{"line":22,"column":24}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":12,"column":11},"generated":{"line":22,"column":33}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":12,"column":11},"generated":{"line":22,"column":34}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":12,"column":11},"generated":{"line":22,"column":42}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":12,"column":4},"generated":{"line":22,"column":45}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":12,"column":20},"generated":{"line":22,"column":55}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":12,"column":4},"generated":{"line":22,"column":72}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":12,"column":60},"generated":{"line":22,"column":74}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":12,"column":4},"generated":{"line":22,"column":93}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":12,"column":100},"generated":{"line":22,"column":95}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":13,"column":8},"generated":{"line":22,"column":96}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":14,"column":5},"generated":{"line":23,"column":0}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":12,"column":11},"generated":{"line":23,"column":3}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":25,"column":0}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":25,"column":9}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":25,"column":30}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":26,"column":0}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":26,"column":1}},{"source":"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":26,"column":3}}],"sources":{"../../../../../sourceES6/core/Materials/Node/Optimizers/nodeMaterialOptimizer.ts":"import { NodeMaterialBlock } from '../nodeMaterialBlock';\r\n\r\n/**\r\n * Root class for all node material optimizers\r\n */\r\nexport class NodeMaterialOptimizer {\r\n    /**\r\n     * Function used to optimize a NodeMaterial graph\r\n     * @param vertexOutputNodes defines the list of output nodes for the vertex shader\r\n     * @param fragmentOutputNodes defines the list of output nodes for the fragment shader\r\n     */\r\n    public optimize(vertexOutputNodes: NodeMaterialBlock[], fragmentOutputNodes: NodeMaterialBlock[]) {\r\n        // Do nothing by default\r\n    }\r\n}"},"lineCount":null}},"error":null,"hash":"39a4bbbb9f53a7f470b88b61872d936b","cacheData":{"env":{}}}